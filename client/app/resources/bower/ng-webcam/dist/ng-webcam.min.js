!function(){"use strict";function n(){function n(n,e){return['<div class="ng-webcam no-overlay" ng-class="{\'no-overlay\' : vm.counter === 0 || vm.config.countdown === 0}">','<span ng-show="vm.webcamLive === true && vm.config.countdown > 0 && vm.counter > 0" id="ng-webcam-counter">{{vm.counter}}</span>','<img ng-show="vm.webcamLive === true" id="ng-webcam-overlay" src="{{vm.config.overlay}}" />','<div id="ng-webcam-container"></div>',"</div>"].join("")}function e(n,e,o,i){i.init(),n.$on("$destroy",function(){i.destroy()})}function o(n,e){function o(){l.config=l.config||{},window.localStorage&&window.localStorage.setItem("visited","1"),angular.isUndefined(l.config.viewerWidth)&&(l.config.viewerWidth="auto"),angular.isUndefined(l.config.viewerHeight)&&(l.config.viewerHeight="auto"),angular.isUndefined(l.config.outputWidth)&&(l.config.outputWidth=320),angular.isUndefined(l.config.outputHeight)&&(l.config.outputHeight=240),angular.isUndefined(l.config.delay)&&(l.config.delay=0),angular.isUndefined(l.config.shots)&&(l.config.shots=1),angular.isUndefined(l.config.countdown)&&(l.config.countdown=0),c(),t()}function i(){l.webcamLive&&Webcam.reset(),l.webcamLive=!1,l.webcamLoaded=!1,angular.isDefined(s)&&(e.cancel(s),s=void 0),angular.isDefined(d)&&(e.cancel(d),d=void 0),l.counter=3}function t(){angular.isDefined(l.config.shutterUrl)&&(u=new Audio,u.autoplay=!1,navigator.userAgent.match(/Firefox/)?u.src=l.config.shutterUrl.split(".")[0]+".ogg":u.src=l.config.shutterUrl),Webcam.set({width:l.config.viewerWidth,height:l.config.viewerHeight,dest_width:l.config.outputWidth,dest_height:l.config.outputHeight,force_flash:!1,image_format:"jpeg",jpeg_quality:100,flip_horiz:!0}),angular.isDefined(l.config.flashNotDetectedText)&&Webcam.set("flashNotDetectedText",l.config.flashNotDetectedText),angular.isDefined(l.config.flashFallbackUrl)&&Webcam.setSWFLocation(l.config.flashFallbackUrl),Webcam.attach("#ng-webcam-container")}function c(){Webcam.on("load",function(){n.$apply(function(){l.webcamLoaded=!0,angular.isDefined(l.onLoad)&&l.onLoad()})}),Webcam.on("live",function(){n.$apply(function(){l.webcamLive=!0,angular.isDefined(l.onLive)&&l.onLive()})}),Webcam.on("error",function(n){angular.isDefined(l.onError)&&l.onError({err:n})})}function a(n){u&&u.play(),n===l.config.shots-1&&e.cancel(s),Webcam.snap(function(e){if(m[n]=e,n<l.config.shots-1&&angular.isDefined(l.onCaptureProgress)){var o=Math.round(100*(n+1)/l.config.shots);l.onCaptureProgress({src:e,progress:o})}if(n===l.config.shots-1&&angular.isDefined(l.onCaptureComplete))return l.onCaptureComplete({src:m})})}function r(){if(angular.isUndefined(l.config.countdown)){var n=0;s=e(function(){a(n),n++},1e3*l.config.delay,l.config.shots)}else{if(void 0!==d)return;l.counter=3,d=e(function(){if(l.counter=l.counter-1,0===l.counter){d&&e.cancel(d);var n=0;s=e(function(){a(n),n++},1e3*l.config.delay,l.config.shots)}},1e3,3)}}function f(){Webcam.attach("#ng-webcam-container")}function g(){i()}var u,s,d,l=this,m=[];l.webcamLoaded=!1,l.webcamLive=!1,l.counter=3,l.init=o,l.destroy=i,n.$on("ngWebcam_capture",r),n.$on("ngWebcam_on",f),n.$on("ngWebcam_off",g)}var i={restrict:"E",template:n,link:e,bindToController:!0,controller:o,controllerAs:"vm",scope:{config:"=",onCaptureComplete:"&",onError:"&",onLoad:"&",onCaptureProgress:"&",onLive:"&"}};return o.$inject=["$scope","$interval"],i}angular.module("ng-webcam",[]).directive("ngWebcam",n),n.$inject=[]}();
//# sourceMappingURL=data:application/json;base64,
